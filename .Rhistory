for (i in Cal){
i <- get(i)
Cal_Col <- c(mean(i),min(i),max(i),
quantile(Ns, probs = c(0.025,0.05,0.25,0.5,0.75,0.95,0.975,0.99)))
Table <- cbind(Table,Cal_Col)
}
colnames(Table) <- c("均值","最小值","最大值","第2.5百分位数","第5百分位数",
"第25百分位数","第50百分位数","第75百分位数","第95百分位数",
"第97.5百分位数","第99百分位")
View(Table)
rownames(Table) <- c("均值","最小值","最大值","第2.5百分位数","第5百分位数",
"第25百分位数","第50百分位数","第75百分位数","第95百分位数",
"第97.5百分位数","第99百分位")
View(Table)
library(mc2d)
?rpert
?exp
log(exp(3))
exp(3)
10^(rnorm(1,-3.51,0.43))
tWKcold =function(x){
(10^(rnorm(1,-3.51,0.43)))/(10^rnorm(1,-3.15,0.49))
}
tWKcold()
tWKcold()
tWKcold()
tWKcold()
tWKcold()
tWKcold()
tWKcold()
tWKcold()
tWKcold()
tWKcold()
tWKcold()
tWHsoap =function(x){10^(rnorm(1,-7.04,0.66))/10^(rnorm(1,-2.88,0.68))
}
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHsoap()
tWHcold =function(x){10^(rnorm(1,-6.46,1.26))/10^(rnorm(1,-2.88,0.68))
tWHcold =function(x){10^(rnorm(1,-6.46,1.26))/10^(rnorm(1,-2.88,0.68))
}
tWHcold()
tWHcold()
tWHcold =function(x){10^(rnorm(1,-6.46,1.26))/10^(rnorm(1,-2.88,0.68))
}
tWHcold =function(x){10^(rnorm(1,-6.46,1.26))/10^(rnorm(1,-2.88,0.68))
}
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWHcold()
tWBcold =function(x){
10^(rnorm(1,-3.51,0.43))/10^(rnorm(1,-3.15,0.49))
}
# with cold water
tWBcold =function(x){
10^(rnorm(1,-3.51,0.43))/10^(rnorm(1,-3.15,0.49))
}
# with cold water and soap
tWBsoap =function(x){
10^(rnorm(1,-6.4,1.54))/10^(rnorm(1,-3.15,0.49))
}
# board→RTE
tBS =function(x){10^(rnorm(1,1.535,0.32))/100
}
# chicken→knife
tCK <- tCB
# not washing knife
tNWK <- 1
# with cold water only
tWKcold =function(x){
(10^(rnorm(1,-3.51,0.43)))/(10^rnorm(1,-3.15,0.49))
}
# with cold water and soap
tWKsoap =function(x){
10^(rnorm(1,-6.4,1.54))/10^(rnorm(1,-3.15,0.49))
}
tWBcold()
tWBcold()
tWBcold()
tWBcold()
tWBcold()
tWBcold()
10^Normal(-2.88,0.68)
10^rnorm(-2.88,0.68)
10^rnorm(1,-2.88,0.68)
install.packages("learnr")
?dir.create
######################### Skin contact####################
# setting of parameters
# C CHILD A ADULT NC non-caner CA cancer
# SAE 暴露皮肤表面积 cm2 c and a
## H 平均身高，cm, 推荐值见表G.1；c and a
H <- c(161.5,113.15)
## SER 暴露皮肤所占面积比，无量纲，推荐值见表G.1；儿童第二类用地无数据，第一类用地成人和儿童分别为0.32、0.18
SER <- c(0.18,NA)
## BW 平均体重 kg c and a
BW <- c(61.8,19.2)
# SAE formula
SAE <- 239*H*BW*SER
# EF 暴露频率 d·a-1 c and a 第二类用地儿童无，第一类用地分别为350、350
EF <- c(350,NA)
# ED 暴露期，a；推荐值见表G.1 c and a 第二类用地儿童无，第一类用地分别为24、6
ED <- c(25,NA)
# Ev 每日洗澡、游泳、清洗等事件发生频率（次/d）,见表G.1
Ev <- c(1,1)
# DA 皮肤接触吸收剂量，mg·cm-2 c and a
## Kp －皮肤渗透系数（cm/h），推荐值见表G.1；
### Kow
### MW
## Kp formula
# Kp <- exp(-2.80 +0.66*log(Kow)-0.0056*MW)
Kp <- 0.001
## t 次经皮肤接触的时间（h），推荐值见表G.1； c and a
t <- c(0.5,0.5)
## Cgw －地下水中污染物浓度（mg/l）；##
Cgw <- 0.039
# DA formula
DA <- Kp*t*Cgw*0.001
# ATnc－效应平均时间，d；推荐值见表G.1
ATca <- c(27740,27740)
ATnc <- c(2190,9125)
# NC formula
DGWERnc <- (SAE*EF*ED*Ev*DA*0.00001)/(BW*ATnc)
#########################outdoor Oral inhalation #########################
# VFgwoa 地下水中污染物进入室外空气的挥发因子，L·m-3,根据附录F 公式（F.21）
## Hu 的参数含义见公式（F.1）,无量纲亨利常数，cm3·cm-3；推荐值见表B.2；无参数
## Lgw 地下水埋深，cm；必须根据场地调查获得参数值；
## Deffgws 的参数含义见公式（F.7）,地下水到表层土壤的有效扩散系数，cm2·s-1；
### hcap －地下水土壤交界处毛细管层厚度，cm；推荐值见表G.1；
hcap <- 5
### hv －非饱和土层厚度，cm；优先根据场地调查数据确定，推荐值见表G.1；
hv <- 295
### Deffcap －毛细管层中气态污染物的有效扩散系数，cm2·s-1，根据公式（F.6）计算
#### θacap －毛细管层土壤中孔隙空气体积比，无量纲；推荐值见表G.1；
θacap <- 0.038
#### θwcap －毛细管层土壤中孔隙水体积比，无量纲；推荐值见表G.1。
θwcap <- 0.342
#### Da －空气中扩散系数，cm2·s-1；推荐值见表B.2； 无数据
#### Dw －水中扩散系数，cm2·s-1；推荐值见表B.2；无数据
#### Hu －无量纲亨利常数，cm3·cm-3；推荐值见表B.2；无数据
#### θ －非饱和土层土壤中总孔隙体积比，无量纲；根据公式（F.2）计算；
##### ρb －土壤容重，kg·cm-3；推荐值见表G.1；
ρb <- 0.0015
##### ρs －土壤颗粒密度，kg·cm-3，推荐值见表G.1。
ρs <- 0.00265
#### θ formula
θ <- 1-ρb/ρs
### Deffcap formula
Deffcap <- Da*θacap^3.33/θ^2+DW*θwcap^3.33/(Hu*θ^2)
### Deffs 的参数含义见公式（F.1）,土壤中气态污染物的有效扩散系数，cm2·s-1；
#### θws －非饱和土层土壤中孔隙水体积比，无量纲；根据公式（F.3）计算；
##### ρw －水的密度， 1 g·cm-3。
ρw <- 1
#### θws formula
θws <- (ρb*Pws)/ρw
#### θas －非饱和土层土壤中孔隙空气体积比，无量纲；根据公式（F.4）计算。
θas <- θ-θws
### Deffs formula
Deffs <- Da*θas^3.33/θ^2+DW*θws^3.33/(Hu*θ^2)
## Deffgws foumula
Deffgws <- Lgw/((hcap/Deffcap)+(hv/Deffs))
## DFoa 的参数含义见公式（F.11）,室外空气中气态污染物扩散因子，(g·cm-2·s-1)/(g·cm-3)
### Uair 混合区大气流速风速，cm·s-1
Uair <- 200
### A 污染源区面积，cm2 G1表格为空 ###
### W 污染源区宽度，cm2
W <- 4000
### δair 混合区高度，cm
δair <- 200
DFoa <- (Uair*W*δair)/A
# VFgwoa foumula
VFgwoa <- 1000*Hu/(1+DFoa*Lgw/Deffgws)
# DAIR －每日空气呼吸量，m3·d-1；推荐值见表G.1；二类儿童无，一类分别为14.5、7.5
DAIR <- c(14.5,NA)
# EFI －室内暴露频率，d·a-1; 推荐值见附录G 表G.1;二类儿童无，一类分别为262.5、262.5
EFI <- c(187.5,NA)
# NC formula
IOVERnc <- (VFgwoa*DAIR*EFI*ED)/(BW*AT)
#########################indoor Oral inhalation #########################
# VFgwia 地下水中污染物进入室内空气的挥发因子，L·m-3,根据附录F 公式（F.27）
VFgwia1 <- 1000*Hu/()
# DAIR －成人每日空气呼吸量，m3·d-1；推荐值见表G.1；
# EFO －室外暴露频率，d·a-1；推荐值见表G.1；
# NC indoor formula
IIVERnc <- (VFgwia*DAIR*EFO*ED)/(BW*AT)
Hu
3*1/2*3
T1 <- function(x){rtriang(1, a = -20.275, b = 31.52, c = 28.1)
}
T1()
T1 <- function(x){extraDistr::rtriang(1, a = -20.275, b = 31.52, c = 28.1)
}
T1()\
T1()
install.packages("extraDistr")
T1 <- function(x){extraDistr::rtriang(1, a = -20.275, b = 31.52, c = 28.1)
}
install.packages("extraDistr")
T1()
T1()
T1()
T1()
T1()
T1()
library(extraDistr)
?rtriang
Wf <- function(x){(T1()*W1())/7
}
Wf()
W1 <- function(x){rempiricalC(1,0,500,values = c(10,50,75,100),prob=c(0.1,0.35,0.75,0.9))
}
# T1 各主要城市月平均温度/℃
T1 <- function(x){extraDistr::rtriang(1, a = -20.275, b = 31.52, c = 28.1)
}
# Wf 居民平均每天摄入即食食物量/（g/（人·d））
Wf <- function(x){(T1()*W1())/7
}
Wf()
library(mc2d)
library(e1071)
library(prevalence)
library(psych)
library(ggplot2)
# F 居民食用即食食物频次/（餐/周）
F <- function(x){rempiricalC(1,0,7,values = c(0.02,0.25,1),prob=c(0.2,0.75,0.95))
}
# W1 即食食物摄入量/（（g/（人·餐）））
W1 <- function(x){rempiricalC(1,0,500,values = c(10,50,75,100),prob=c(0.1,0.35,0.75,0.9))
}
# T1 各主要城市月平均温度/℃
T1 <- function(x){extraDistr::rtriang(1, a = -20.275, b = 31.52, c = 28.1)
}
# Wf 居民平均每天摄入即食食物量/（g/（人·d））
Wf <- function(x){(T1()*W1())/7
}
Wf()
Wf <- function(x){(
n <- T1()*W1())/7
if (n<0) {
n <- 0
}
n
}
Wf()
Wf()
Wf()
Wf()
Wf()
Wf()
Wf()
Wp <- function(x){(rempiricalC(46,93,values = c(69,84,92),prob=c(0.1,0.7,0.9))
}
Wp <- function(x){rempiricalC(46,93,values = c(69,84,92),prob=c(0.1,0.7,0.9))
}
Wp()
Wp <- function(x){rempiricalC(1,46,93,values = c(69,84,92),prob=c(0.1,0.7,0.9))
}
Wp()
install.packages("ltm")
library(ltm)
?ltm
data(iris)
set.seed(71)
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE, proximity=TRUE)
print(iris.rf)
library(randomForest)
data(iris)
set.seed(71)
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE, proximity=TRUE)
print(iris.rf)
plot(iris.mds$points, col = rep(c("red", "blue", "green"), each = 50))
iris.mds <- cmdscale(1 - iris.rf$proximity, eig=TRUE)
plot(iris.mds$points, col = rep(c("red", "blue", "green"), each = 50))
iris.rf$importance
varImpPlot(iris.rf, main = "Top 30 - variable importance")
library(shiny); source('D:/Deltawork/FoodM/食品风险监测工具箱/foodRM-1.0-Chinese_V0.62.R')
library(shiny); runApp('D:/Deltawork/testfiles/收费/收费shiny.R')
# devtools::document()
# devtools::install()
library(dplyr)
library(stringr)
library(purrr)
library(jsonlite)
library(R6)
library(shiny.semantic)
library(shiny)
library(shinyjs)
library(semantic.dashboard)
library(googlesheets4)
library(gargle)
library(bcrypt)
runApp('D:/Deltawork/Software/ShinyPay/shinyuser')
shiny::runApp('D:/Deltawork/TCM/TCMpaper/Thirdstart/MRTCM')
runApp()
library(shiny); source('D:/Deltawork/Software/ShinyPay/Shinyforusermanagement/testregister.R')
source('D:/Deltawork/Software/ShinyPay/Shinyforusermanagement/testregister.R')
source('D:/Deltawork/Software/ShinyPay/Shinyforusermanagement/testregister.R')
source('D:/Deltawork/Software/ShinyPay/Shinyforusermanagement/testregister.R')
library(RSQLite)
mypath<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(mypath)
# 读取RSQLite中的数据 -----------------------------------------------------------
# 连接到特定位置的数据库文件
con <- dbConnect(SQLite(), dbname = "credentials.sqlite")
# 获取表格列表
table_list <- dbListTables(con)
print(table_list)
# 执行查询
query <- "SELECT * FROM credentials"
result <- dbGetQuery(con, query)
print(result)
# Insert the new rows into the database table
dbWriteTable(con, "your_table_name", new_rows, append = TRUE)
# 关闭连接
dbDisconnect(con)
# 随机生成卡密储存至Rdata中------------------------------------------------------------------
# 创建包含大小写英文字母的字符向量
letters <- c(letters, LETTERS)
# 创建一个空的数据框
random_strings_df <- data.frame(strings = character(), stringsAsFactors = FALSE)
# 生成100个随机字符串并放入数据框
for (i in 1:300) {
random_letters <- sample(letters, 20)
random_string <- paste(random_letters, collapse = "")
random_strings_df <- rbind(random_strings_df, data.frame(strings = random_string, stringsAsFactors = FALSE))
}
# random_strings_df$strings <- paste0("day",random_strings_df$strings)
random_strings_df$day <- 3
random_strings_df[200:300,2] <- 7
keydatabase <- random_strings_df
colnames(keydatabase)[1] <- "key"
save(keydatabase, file = "./data/key.RData")
table_list <- dbListTables(con)
library(RSQLite)
mypath<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(mypath)
# 读取RSQLite中的数据 -----------------------------------------------------------
# 连接到特定位置的数据库文件
con <- dbConnect(SQLite(), dbname = "credentials.sqlite")
# 获取表格列表
table_list <- dbListTables(con)
print(table_list)
con
table_list <- dbListTables(con)
print(table_list)
# Global ------------------------------------------------------------------
library(shiny)
library(shinymanager)
library(shinythemes)
# you can use keyring package to set database key
library(keyring)
# passphrase <- key_set("R-shinymanager-key", "55mayday")
#
#
# new random user
# dailydf <- data.frame(
#   user =random_strings_df$strings, # mandatory
#   password =random_strings_df$strings, # mandatory
#   start = c("2019-04-15"), # optinal (all others)
#   expire = c("2029-05-15"),
#   admin = c(FALSE),
#   # comment = "Simple and secure authentification mechanism
#   # for single ‘Shiny’ applications.",
#   stringsAsFactors = FALSE
# )
# define some credentials
credentials <- data.frame(
user = c("shiny", "shinymanager"), # mandatory
password = c("shiny", "shinymanager"), # mandatory
start = c("2019-04-15"), # optinal (all others)
expire = c("2029-05-15",NA),
admin = c(FALSE, TRUE),
# comment = "Simple and secure authentification mechanism
# for single ‘Shiny’ applications.",
stringsAsFactors = FALSE
)
credentials
library(shiny)
library(RSQLite)
library(tidyverse)
# 连接到 SQLite 数据库
con <- dbConnect(RSQLite::SQLite(), "credentials.sqlite")
# 执行查询
query <- "SELECT * FROM credentials"
userdatabase <- dbGetQuery(con, query)
table_list
library(RSQLite)
mypath<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(mypath)
mypath
create_db(
credentials_data = credentials,
sqlite_path = "credentials.sqlite",
# passphrase =passphrase
)
library(shiny)
library(RSQLite)
library(tidyverse)
# 连接到 SQLite 数据库
con <- dbConnect(RSQLite::SQLite(), "credentials.sqlite")
# 执行查询
query <- "SELECT * FROM credentials"
userdatabase <- dbGetQuery(con, query)
load("./data/key.RData")
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('testregister.R')
source('app.R')
source('app.R')
source('app.R')
mypath<-dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(mypath)
source('app.R')
runApp()
runApp()
source('app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('app.R')
runApp()
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
runApp('D:/Deltawork/Software/ShinyPay/databasemanagement')
runApp('D:/Deltawork/Software/ShinyPay/databasemanagement')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
runApp('D:/Deltawork/Software/ShinyPay/databasemanagement/app2.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
source('D:/Deltawork/Software/ShinyPay/databasemanagement/app.R')
runApp('D:/Deltawork/Software/ShinyPay/databasemanagement')
?shinyApp
runApp('D:/Deltawork/Software/ShinyPay/databasemanagement')
runApp('D:/Deltawork/Software/ShinyPay/databasemanagement')
runApp('D:/Deltawork/Software/ShinyPay/databasemanagement')
runApp('D:/Deltawork/Software/ShinyPay/databasemanagement')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp('D:/Deltawork/TCM/TCMpaper/Thirdstart/MRTCM')
runApp('testfiles/testallshiny.R')
runApp('testfiles/plot2.R')
runApp('D:/Deltawork/Software/FitSoftware')
runApp('D:/Deltawork/Software/FitSoftware/app2.R')
runApp('app2.R')
runApp('D:/Deltawork/Software/FitSoftware/fitdistriplusapp ch.R')
runApp('D:/Deltawork/Software/FitSoftware/app2.R')
runApp('D:/Deltawork/Software/FitSoftware/fitdistriplusapp ch.R')
runApp('app2.R')
runApp('app2.R')
shiny::runApp()
runApp('D:/Deltawork/Software/FitSoftware')
